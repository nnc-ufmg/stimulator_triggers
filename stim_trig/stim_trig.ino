  #include "Arduino.h"


/*
  
inline void digitalWriteDirect(int pin, boolean val){
  if(val) g_APinDescription[pin].pPort -> PIO_SODR = g_APinDescription[pin].ulPin;
  else    g_APinDescription[pin].pPort -> PIO_CODR = g_APinDescription[pin].ulPin;
}

inline int digitalReadDirect(int pin){
  return !!(g_APinDescription[pin].pPort -> PIO_PDSR & g_APinDescription[pin].ulPin);
}

*/

/*
 * Interrupt Numbers
 * 
 * BOARD INT.0 INT.1 INT.2 INT.3 INT.4 INT.5
 * Uno, Ethernet 2 3
 * Mega2560  2 3 21  20  19  18  
 * 32u4 based (e.g Leonardo, Micro)  3 2 0 1 7  
 * 
 */

 
const byte interruptPin = 21;       //This is the ON/OFF switch form the trigger

unsigned long square_length = 100;          // in microseconds
unsigned long square_interval = 5;          // in microseconds
unsigned long ulTIMElast,ulTIMEread;
int ulIcount; 
bool bStart=false;

//////////////////////////////////

// Delta T samples gerados no matlab.
#define deltaT_samples 720

unsigned long  chinterval[deltaT_samples] = {
  80384,169615,61268,188731,250000,15840,81091,20000,74776,20000,34974,3316,250000,250000,94417,35659,97453,22470,123122,3415,60033,21219,24418,17789,223046,26953,250000,61196,188803,150056,57838,6646,13353,6646,14808,650,250000,239867,10132,98747,151252,35141,114595,19489,9761,40824,20000,10188,250000,146455,103544,138387,111612,15590,78782,68141,53463,32152,492,1378,35474,214525,250000,116396,20000,113603,103834,74325,40899,24634,1564,4741,92789,157210,69886,180113,41260,96750,111988,103078,28916,72830,20000,25174,128359,121640,250000,116149,58862,53149,21838,5048,135299,20000,4839,84812,250000,10307,32305,66767,105143,35476,250000,100525,36378,56200,51417,5477,250000,250000,153138,96861,444,87022,40945,70983,19176,823,19176,11426,28708,221291,162419,87580,121353,100304,28341,100835,45068,26519,56258,21318,175660,74339,250000,59801,187234,2963,100438,60091,6726,38754,37805,6182,250000,250000,166802,83197,7160,116982,13932,6067,19306,6092,52736,27722,250000,250000,115792,55972,36679,41556,83321,20000,423,61636,20000,64618,250000,250000,250000,152159,17800,2199,26336,7515,12484,7515,12484,11503,56041,193958,250000,172515,20000,13675,8293,35515,20936,105777,86186,37099,250000,240350,9649,35780,214219,87449,61768,55793,20000,6600,13399,4988,140336,109663,101406,148593,179093,42098,28808,129875,12027,18518,37540,52038,250000,250000,250000,15427,47383,101785,29466,24110,4650,15349,4650,7175,184799,65200,129439,27008,93551,249411,588,113302,4710,15289,20000,96697,162985,87014,80559,144008,25431,250000,103516,41257,32768,39831,11934,20691,56842,193157,167435,82564,213837,36162,83109,29052,27965,68051,31521,10299,250000,107619,142380,117448,82215,21264,20000,9071,82561,43049,53692,70696,20000,230000,248949,1050,250000,108184,86834,20000,6941,13058,6941,8038,250000,100065,120839,29095,34694,185508,14126,15671,4328,60862,21958,162849,152451,97548,250000,250000,43874,57924,42732,35595,24655,20000,20000,5215,155709,94290,2972,247027,51928,87949,89442,20679,36456,119909,81405,12228,250000,142679,107320,147861,102138,131388,44428,20000,4568,20000,20762,8851,215238,34761,250000,126358,123641,56233,89223,20000,12083,48296,9437,14725,167444,82555,18903,231096,6041,243958,208245,20000,1100,18899,1100,653,30644,69608,149746,250000,52198,197801,177242,2220,17779,29422,11460,11875,179007,70992,217128,32871,203421,46578,18265,166559,20000,20000,19730,5445,147020,97257,5721,250000,250000,66904,25638,44723,43904,25898,32857,10073,170936,8532,70531,129093,87455,33451,13733,25401,199349,11515,20025,229974,250000,250000,54137,91801,104061,24424,42709,82819,5977,38036,20000,36031,236697,13302,196774,53225,250000,25822,26026,33443,64934,27996,36838,34937,250000,127699,44235,78065,55823,54775,139400,24913,181877,20000,20000,3208,172873,77126,111746,138253,49025,44290,26407,20000,110276,193770,49462,6766,250000,250000,250000,18694,49878,29979,65965,20000,19328,20000,20000,6153,250000,67456,82287,100256,74946,65409,64292,45351,145780,31097,20000,53121,250000,147512,53002,49484,233436,16563,17424,54312,38250,16961,39590,83459,90667,114728,44604,250000,154192,95807,118223,66888,4484,20000,37557,2846,64677,185322,100822,149177,40696,25065,97254,21813,65169,32025,109066,108908,250000,133162,116837,250000,21922,20000,20000,31783,12452,88962,53158,1720,250000,249453,546,110168,39029,34942,65859,116148,10969,62777,27102,33002,250000,250000,14188,132103,85782,17925,78589,20000,40346,5865,20000,85198,144437,105562,123614,126385,140475,5093,57701,46729,55241,24755,97089,72914,250000,179978,70021,233413,16586,3413,140530,44581,25474,27925,4608,3465,250000,207584,42415,99446,77119,73433,62135,57552,75058,20000,23835,11417,250000,21720,206277,22001,224190,9921,15887,155038,20000,8308,52977,13674,239502,10497,150922,99077,105659,134156,10184,37649,147095,32211,2557,30485,250000,73794,5888,170316,250000,70365,101186,6620,20000,24577,20000,7250,250000,250000,66040,19086,133285,31587,55194,36314,47744,68770,20000,21975,250000,184702,7965,57332,61906,95704,92388,56205,108700,20000,20551,44541,212366,37633,53123,36870,145706,14299,209779,40220,68600,76076,20000,85322,165321,84678,42436,207563,238887,11112,103050,22442,33358,30608,20000,40540,250000,70657,179342,208987,41012,10952,89635,86883,20312,20000,20000,2215,228278,14302,7419,250000,35804,214195,50054,52428,47095,21638,60309,18474,177342,72657,152354,52631,45013,66672,183327,19028,77384,29622,20000,103964,250000,28875,217127,3996,142361,58937,48701,65980,37016,32811,73589,40601
};
static byte chnumber[deltaT_samples] = {
  2,3,2,3,3,1,2,2,1,1,1,3,3,3,1,1,1,3,2,1,2,2,2,3,2,3,3,2,3,1,1,2,1,2,1,3,3,2,3,2,3,2,1,2,1,1,1,3,3,1,3,2,3,2,2,1,1,2,1,3,2,3,3,1,1,3,2,1,2,2,1,3,2,3,2,3,2,1,3,2,1,1,1,3,2,3,3,1,1,2,3,2,1,1,2,3,3,1,1,1,2,3,3,2,1,2,2,3,3,3,1,3,1,2,2,2,1,2,1,3,2,3,1,3,1,2,3,2,1,2,1,3,1,3,3,1,1,3,2,1,2,2,2,3,3,3,1,3,2,2,1,2,1,2,1,3,3,3,1,1,1,3,2,2,1,2,2,3,3,3,3,1,2,1,2,1,2,1,2,3,2,3,3,2,2,1,2,3,1,1,1,3,3,2,3,2,3,1,2,1,1,2,1,3,1,3,1,3,2,2,3,1,2,1,2,3,3,3,3,1,1,2,2,1,2,1,2,3,1,3,1,2,3,1,3,2,1,2,2,3,2,3,1,2,3,3,1,2,1,1,2,3,2,3,2,3,2,3,2,1,1,1,1,3,3,1,3,2,1,1,1,3,2,2,2,3,2,3,1,3,3,1,2,2,1,2,1,3,3,2,2,3,1,2,1,3,1,2,1,3,1,3,3,3,1,1,2,1,2,2,2,3,1,3,2,3,2,1,1,3,2,1,2,3,3,2,3,1,3,1,1,1,2,2,2,3,1,3,3,2,3,2,1,1,2,2,1,3,2,3,2,3,1,3,1,1,2,1,2,3,2,1,3,3,2,3,1,2,1,2,1,3,2,3,2,3,2,3,1,1,1,1,2,3,2,1,3,3,3,1,2,1,2,2,1,3,1,2,3,1,1,3,2,1,2,3,2,3,3,3,2,2,3,2,1,1,2,1,1,3,2,3,2,3,3,2,1,2,1,1,1,3,3,1,1,3,1,1,3,2,2,2,2,3,1,3,1,3,2,2,1,1,3,2,2,3,3,3,3,2,2,1,2,2,1,1,1,3,3,1,2,3,2,2,2,3,1,1,1,3,3,2,2,3,1,3,2,1,1,2,1,3,1,1,3,3,2,3,2,1,2,2,1,3,2,3,2,3,1,1,1,2,3,1,2,3,3,2,3,3,1,1,1,1,2,2,2,3,3,2,3,1,2,2,3,1,2,1,1,3,3,3,1,1,2,3,2,2,2,1,1,3,2,3,2,3,2,1,1,3,1,2,1,3,3,2,3,1,3,1,2,2,1,1,2,3,3,1,3,2,1,3,1,1,2,2,2,3,3,2,1,3,1,2,3,2,2,1,1,3,2,3,2,3,1,1,3,2,1,2,1,3,3,2,1,3,3,2,1,2,2,1,1,3,3,3,2,1,2,3,1,1,1,2,2,3,3,2,1,3,1,2,3,2,1,1,2,3,1,3,2,1,1,3,1,3,2,2,2,3,2,3,1,3,2,3,2,2,1,1,1,3,3,2,3,2,3,2,1,2,1,1,1,3,2,1,3,3,1,3,1,1,2,2,2,3,2,3,2,2,3,1,3,2,1,1,1,3,3,1,1,3,2,1,3,2,1,2,2,3
};

static byte chpinP[8] = {
  2,3,4,5,6,7,8,9
  };
static byte chpinN[8] = {
  12,13,14,15,16,17,18,19
  };
///////////////////////////////////

void setup()
{
    for (int i = 0; i < 8; i++) 
      {
      pinMode(chpinP[i], OUTPUT);
      pinMode(chpinN[i], OUTPUT);
      digitalWrite(chpinP[i], LOW);
      digitalWrite(chpinN[i], LOW);
      //delayMicroseconds(1);
      }
     ulTIMElast = micros();
     ulIcount=0;
     
     pinMode(interruptPin, INPUT);
     attachInterrupt(digitalPinToInterrupt(interruptPin), OnOffSwitch, CHANGE);  
}

void loop() 
{
  ulTIMEread=micros();
  if (bStart)
      if ((ulTIMEread-ulTIMElast)>chinterval[ulIcount])
        {
          //Let's trigger a stimuli
          digitalWrite(chpinP[chnumber[ulIcount]],HIGH);
          delayMicroseconds(square_length);
          digitalWrite(chpinP[chnumber[ulIcount]],LOW);
          delayMicroseconds(square_interval);
          digitalWrite(chpinN[chnumber[ulIcount]],HIGH);
          delayMicroseconds(square_length);
          digitalWrite(chpinN[chnumber[ulIcount]],LOW);
          
          ulIcount++;
          if(ulIcount>=deltaT_samples) ulIcount=0;
          ulTIMElast=ulTIMEread;
        }
  //Just in case clock runs wholhe unsigned long 72min numbers
  //if (ulTIMEread<ulTIMElast) ulTIMElast=ulTIMEread; // We can fix this better by subtracting from chinterval[ulIcount]
}



void OnOffSwitch() 
{
  if (digitalRead(interruptPin))
    {
      ulIcount=0;
      ulTIMElast = micros();
      bStart=true; 
      
    } else  {
            bStart=false; 
            }
}
