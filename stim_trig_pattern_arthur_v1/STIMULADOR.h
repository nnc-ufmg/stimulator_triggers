
#ifndef STIMULADOR_H
#define STIMULADOR_H

/* SERIAL DIGITAL WRITE   
 *  
 */
inline void digital_write_direct(int pin, boolean val){
  if(val) g_APinDescription[pin].pPort -> PIO_SODR = g_APinDescription[pin].ulPin;
  else    g_APinDescription[pin].pPort -> PIO_CODR = g_APinDescription[pin].ulPin;
}
/* SERIAL DIGITAL READ 
 *  
 */
inline int digital_read_direct(int pin){
  return !!(g_APinDescription[pin].pPort -> PIO_PDSR & g_APinDescription[pin].ulPin);
}


/* ALL FUNCTIONS
*/
extern void start_stimulation();
extern void stimulation_interrupt();
extern void stop_stimulation();
extern void OnOffSwitch();


/*
Setting definitions of variables to be used in the current version of this software
*/
const byte interruptPin = 21;             //This is the ON/OFF switch form the trigger
const byte synchronizationPin = 20;       //This is the pin synchronizing each word.


unsigned long square_length_positive = 100;         // in microseconds
unsigned long square_length_negative = 100;         // in microseconds
unsigned long square_interval = 5;                  // in microseconds


unsigned long ulBinPeriod = 14000;                  // in microseconds (each word's binary number the period of the stimulation is ulBinPeriod x )
unsigned long ulWORDSIZE = 10;                      // in number of Bins per word

bool bInBetweenWords=false;                         // tells if we are running a word or we should check if there is a "pause" in between words
unsigned long ulBetweenWordWaitInterval=14000;      // in microseconds how much to wait in between words.
unsigned long ulWORDrepetitionLAG = 10;             // if ZERO is continuous => if non zero, represents the number of SILENT BINS
unsigned long binWordMASK;                          // This is the logical mask for & with the WORD Currently beeing stimulated
unsigned long binWordMASKTOP;                       // MAX WORDMASK  i.e. 2Ë†10
int uI_WordCount=0;                                 // Which Word in the list
int uI_WordCountMAX=210;                            // Number of words to play (all possibilities to 10 bits word with more than 6 bits equal to one)

unsigned long ulTIMElast,ulTIMEread;


bool bStart=false;

#define numberOfChannelsWORD 2
#define numberOfWORDs 210
//Arthur
unsigned long  chWORD[numberOfChannelsWORD][numberOfWORDs] = {
{312,674,156,680,643,579,356,912,538,773,777,390,561,660,780,240,624,180,92,688,804,116,86,277,904,297,657,568,771,58,300,720,417,897,456,154,77,646,202,650,30,785,531,113,389,282,45,75,169,29,46,547,525,267,404,834,195,450,263,664,147,586,792,652,808,89,593,612,533,284,418,278,585,209,102,706,402,420,658,269,53,108,801,166,408,308,900,83,581,170,609,165,198,594,298,172,291,293,554,142,177,540,23,120,153,676,150,480,232,550,178,393,778,57,645,204,673,549,39,294,898,323,840,864,802,588,226,305,275,85,452,401,71,610,326,534,114,600,736,786,101,432,564,387,105,163,344,596,848,225,270,360,582,201,15,210,424,616,960,306,353,368,836,228,562,90,816,60,54,788,449,212,139,51,340,135,354,712,43,928,553,106,774,708,537,99,27,332,325,556,216,519,141,149,197,78,337,705,523,833,396,330,526,281,338,329,649,394,464,184},
{}
};
//

unsigned long  chWORD2[numberOfChannelsWORD][numberOfWORDs] = {
{312,674,156,680,643,579,356,912,538,773,777,390,561,660,780,240,624,180,92,688,804,116,86,277,904,297,657,568,771,58,300,720,417,897,456,154,77,646,202,650,30,785,531,113,389,282,45,75,169,29,46,547,525,267,404,834,195,450,263,664,147,586,792,652,808,89,593,612,533,284,418,278,585,209,102,706,402,420,658,269,53,108,801,166,408,308,900,83,581,170,609,165,198,594,298,172,291,293,554,142,177,540,23,120,153,676,150,480,232,550,178,393,778,57,645,204,673,549,39,294,898,323,840,864,802,588,226,305,275,85,452,401,71,610,326,534,114,600,736,786,101,432,564,387,105,163,344,596,848,225,270,360,582,201,15,210,424,616,960,306,353,368,836,228,562,90,816,60,54,788,449,212,139,51,340,135,354,712,43,928,553,106,774,708,537,99,27,332,325,556,216,519,141,149,197,78,337,705,523,833,396,330,526,281,338,329,649,394,464,184},
{553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553}
};

unsigned long  chWORD3[numberOfChannelsWORD][numberOfWORDs] = {
{312,674,156,680,643,579,356,912,538,773,777,390,561,660,780,240,624,180,92,688,804,116,86,277,904,297,657,568,771,58,300,720,417,897,456,154,77,646,202,650,30,785,531,113,389,282,45,75,169,29,46,547,525,267,404,834,195,450,263,664,147,586,792,652,808,89,593,612,533,284,418,278,585,209,102,706,402,420,658,269,53,108,801,166,408,308,900,83,581,170,609,165,198,594,298,172,291,293,554,142,177,540,23,120,153,676,150,480,232,550,178,393,778,57,645,204,673,549,39,294,898,323,840,864,802,588,226,305,275,85,452,401,71,610,326,534,114,600,736,786,101,432,564,387,105,163,344,596,848,225,270,360,582,201,15,210,424,616,960,306,353,368,836,228,562,90,816,60,54,788,449,212,139,51,340,135,354,712,43,928,553,106,774,708,537,99,27,332,325,556,216,519,141,149,197,78,337,705,523,833,396,330,526,281,338,329,649,394,464,184},
{}
};

//553	1000101001
//int b[ 2 ][ 2 ] = { { 1, 2 }, { 3, 4 } };

//Now for the new STUFF



#define NumberOfChannels 8
static byte chpinP[NumberOfChannels] = {
  2,3,4,5,6,7,8,9
  };
static byte chpinN[NumberOfChannels] = {
  12,13,14,15,16,17,18,19
  };
#endif
